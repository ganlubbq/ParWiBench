
#define LOG_INFINITY	1e30

#define BLOCK_SIZE	80
#define N_STATES	8
#define N_TAIL	3
#define N_GENS	2

inline float max_log(float a, float b)
{
	return (a > b) ? a : b;
}

__kernel void par_log_decoder_kernel(__global float *recv_syst,
									 __global float *recv_parity,
									 __global float *apriori,
									 __global float *extrinsic,
									 int n_subblk,
									 int subblk_sz,
									 int n_subblks_per_blk,
									 __global float *alpha,
									 __global float *beta,
									 __global int *g_output_parity,
									 __global int *g_state_trans,
									 __global int *g_rev_state_trans,
									 __local float *nii_alpha,
									 __local float *nii_beta,
									 __global float *gamma,
									 __global float *denom)
{
	float nom, den, temp0, temp1, exp_temp0, exp_temp1, rp;
	int j, s0, s1, k, kk, l, s, s_prim, s_prim0, s_prim1;
	int alpha_len;
	int stride;
	float Lc;

	size_t gid, lid;
	int g_subblk_id, l_subblk_id;
	int g_subblk_offset, l_subblk_offset;

	Lc = 1.0;

	gid = get_global_id(0);
	g_subblk_id = gid / N_STATES;	// global sub-block id
	
	lid = get_local_id(0);
	l_subblk_id = lid / N_STATES;

//	for (i = 0; i < n_subblk; i++)
//	{
	g_subblk_offset = (g_subblk_id / n_subblks_per_blk) * (BLOCK_SIZE + N_TAIL) + (g_subblk_id % n_subblks_per_blk) * subblk_sz;
	l_subblk_offset = (l_subblk_id / n_subblks_per_blk) * (BLOCK_SIZE + N_TAIL) + (l_subblk_id % n_subblks_per_blk) * subblk_sz;

	if ((g_subblk_offset % n_subblks_per_blk) == (n_subblks_per_blk - 1))
		stride = subblk_sz + N_TAIL;
	else
		stride = subblk_sz;


		
	for (k = 0; k <= stride; k++)
	{
		denom[g_subblk_offset + k] = -LOG_INFINITY;
	}
		


	// Calculate gamma
	for (k = 1; k <= stride; k++)
	{
		kk = k - 1;

		//	for (s_prim = 0; s_prim < N_STATES; s_prim++)
		//	{
		s_prim = gid % N_STATES;
		exp_temp0 = 0.0;
		exp_temp1 = 0.0;

		for (j = 0; j < (N_GENS - 1); j++)
		{
			rp = recv_parity[g_subblk_offset * (N_GENS - 1) + kk * (N_GENS - 1) + j];
			if (0 == g_output_parity[s_prim * (N_GENS - 1) * 2 + j * 2 + 0])
			{
				exp_temp0 += rp;
			}
			else
			{ 
				exp_temp0 -= rp;
			}
			if (0 == g_output_parity[s_prim * (N_GENS - 1) * 2 + j * 2 + 1])
			{
				exp_temp1 += rp;
			}
			else
			{
				exp_temp1 -= rp; 
			}
		}

		l_gamma[N_STATES * 2 * l_subblk_offset + (2 * s_prim + 0) * (stride + 1) + k] = 0.5 * ((l_apriori[l_subblk_offset + kk] + recv_syst[g_subblk_offset + kk]) + exp_temp0);
		//	printf("%f\t", l_gamma[(2 * s_prim + 0) * (stride + 1) + k]);
		l_gamma[N_STATES * 2 * l_subblk_offset + (2 * s_prim + 1) * (stride + 1) + k] = -0.5 * ((l_apriori[l_subblk_offset + kk] + recv_syst[g_subblk_offset + kk]) - exp_temp1);
		//	printf("%f\n", l_gamma[(2 * s_prim + 1) * (stride + 1) + k]);
		//	}
	}

	// Calculate alpha, going forward through the trellis
	for (k = 1; k <= stride; k++)
	{
		//		for (s = 0; s < N_STATES; s++)
//		{
		s = lid % N_STATES;
		nii_alpha[l_subblk_id * N_STATES + s] = alpha[(g_subblk_offset + k) * N_STATES + s];
//		}

		// Synchronize in a work group
		barrier(CLK_LOCAL_MEM_FENCE);
		
//		for (s = 0; s < N_STATES; s++)
//		{
		s_prim0 = g_rev_state_trans[s * 2 + 0];
		s_prim1 = g_rev_state_trans[s * 2 + 1];
		temp0 = nii_alpha[l_subblk_id * N_STATES + s_prim0] + gamma[(2 * s_prim0 + 0) * (stride + 1) + k];
		temp1 = nii_alpha[l_subblk_id * N_STATES + s_prim1] + gamma[(2 * s_prim1 + 1) * (stride + 1) + k];
		alpha[s * (stride + 1) + k] = max_log(temp0, temp1);
		denom[k] = max_log(alpha[s * (stride + 1) + k], denom[k]);
//		}

		// Normalization of alpha
//		for (s = 0; s < N_STATES; s++)
//		{
		alpha[s * (stride + 1) + k] -= denom[k];
//		}
		
		// Synchronize in a work group
		barrier(CLK_LOCAL_MEM_FENCE);
	}

	// Calculate beta going backward in the trellis
	for (k = stride; k >= /*2*/ 1; k--)
	{
		s = lid % N_STATES;
		nii_beta[l_subblk_id * N_STATES + s] = beta[(g_subblk_offset + k) * N_STATES + s];

		// Synchronize in a work group
		barrier(CLK_LOCAL_MEM_FENCE);

		s_prim = lid % N_STATES;
		//	for (s_prim = 0; s_prim < N_STATES; s_prim++)
		//	{
			s0 = g_state_trans[s_prim * 2 + 0];
			s1 = g_state_trans[s_prim * 2 + 1];
			temp0 = nii_beta[l_subblk_id * N_STATES + s0] + gamma[(2 * s_prim + 0) * (stride + 1) + k];
			temp1 = nii_beta[l_subblk_id * N_STATES + s1] + gamma[(2 * s_prim + 1) * (stride + 1) + k];

			beta[s_prim * (stride + 1) + k - 1] = max_log(temp0, temp1);
			//	}
		// Normalization of beta
			//	for (s = 0; s < N_STATES; s++)
			//	{
			beta[s_prim * (stride + 1) + k - 1] -= denom[k];
			//	}
			
			// Synchronize in a work group
			barrier(CLK_LOCAL_MEM_FENCE);


	}

	// Calculate extrinsic output for each bit
	for (k = 1; k <= stride; k++)
	{
		kk = k - 1;
//		nom = -LOG_INFINITY;
//		den = -LOG_INFINITY;
		//	for (s_prim = 0; s_prim < N_STATES; s_prim++)
		//	{
		s_prim = gid % N_STATES;
		s0 = g_state_trans[s_prim * 2 + 0];
		s1 = g_state_trans[s_prim * 2 + 1];
		exp_temp0 = 0.0;
		exp_temp1 = 0.0;
		for (j = 0; j < (N_GENS - 1); j++)
		{
			rp = recv_parity[g_subblk_offset * (N_GENS - 1) + kk * (N_GENS - 1) + j];
			if (0 == g_output_parity[s_prim * (N_GENS - 1) * 2 + j * 2 + 0])
			{
				exp_temp0 += rp;
			}
			else
			{
				exp_temp0 -= rp; 
			}
			if (0 == g_output_parity[s_prim * (N_GENS - 1) * 2 + j * 2 + 1])
			{ 
				exp_temp1 += rp;
			}
			else
			{
				exp_temp1 -= rp;
			}
		}

		/*
		 * gamma is not used from now on, so we can reuse it for the future reduction
		 */
		//	nom = max_log(nom, alpha[N_STATES * g_subblk_offset + s_prim * (stride + 1) + kk] + 0.5 * exp_temp0 + beta[N_STATES * g_subblk_offset + s0 * (stride + 1) + k]);
		//	den = max_log(den, alpha[N_STATES * g_subblk_offset + s_prim * (stride + 1) + kk] + 0.5 * exp_temp1 + beta[N_STATES * g_subblk_offset + s1 * (stride + 1) + k]);
		gamma[N_STATES * 2 * g_subblk_offset + s_prim * 2 * (stride + 1) + 2 * kk + 0] = alpha[N_STATES * g_subblk_offset + s_prim * (stride + 1) + kk] + 0.5 * exp_temp0 + beta[N_STATES * g_subblk_offset + s0 * (stride + 1) + k];
		gamma[N_STATES * 2 * g_subblk_offset + s_prim * 2 * (stride + 1) + 2 * kk + 0] = alpha[N_STATES * g_subblk_offset + s_prim * (stride + 1) + kk] + 0.5 * exp_temp1 + beta[N_STATES * g_subblk_offset + s1 * (stride + 1) + k];
		//	}

		// Synchronize in a work group
		barrier(CLK_LOCAL_MEM_FENCE);

		s_prim = gid % N_STATES;
		if (0 == s_prim)
		{
			nom = -LOG_INFINITY;
			den = -LOG_INFINITY;
			
			for (s = 0; s < N_STATES; s++)
			{
				nom = max_log(nom, gamma[N_STATES * 2 * g_subblk_offset + s * 2 * (stride + 1) + 2 * kk + 0]);
				den = max_log(den, gamma[N_STATES * 2 * g_subblk_offset + s * 2 * (stride + 1) + 2 * kk + 1]);
			}
			extrinsic[g_subblk_offset + kk] = nom - den;
		}
	}
//	}
}
