
#define LTE_PHY_N_ANT_MAX 2


static void MatrixProd(int d1, int d2, int d3,
					   float M1Real[], float M1Imag[],
					   float M2Real[], float M2Imag[],
					   float oMReal[], float oMImag[])
{
	int r, c, i;
	
	for (r = 0; r < d1; r++)
	{
		for (c = 0; c < d3; c++)
		{
			float tmp_real = 0.0;
			float tmp_imag = 0.0;
			
			for (i = 0; i < d2; i++)
			{
				tmp_real += (M1Real[r * d2 + i] * M2Real[i * d3 + c] - M1Imag[r * d2 + i] * M2Imag[i * d3 + c]);
				tmp_imag += (M1Real[r * d2 + i] * M2Imag[i * d3 + c] + M1Imag[r * d2 + i] * M2Real[i * d3 + c]);
			}
		
			oMReal[r * d3 + c] = tmp_real;
			oMImag[r * d3 + c] = tmp_imag;
		}
	}
}


static void MatrixInv(int sz,
					  float pMReal[], float pMImag[],
					  float pInvMReal[], float pInvMImag[])
{
	float pXReal[LTE_PHY_N_ANT_MAX * (2 * LTE_PHY_N_ANT_MAX)];
	float pXImag[LTE_PHY_N_ANT_MAX * (2 * LTE_PHY_N_ANT_MAX)];

	for (int r = 0; r < sz; r++)
	{
		for (int c = 0; c < sz; c++)
		{
			//	pX[r * (2 * sz) + c] = pM[r * sz + c];
			pXReal[r * (2 * sz) + c] = pMReal[r * sz + c];
			pXImag[r * (2 * sz) + c] = pMImag[r * sz + c];
		}
		for (int c = sz; c < 2 * sz; c++)
		{
			if (c == (r + sz))
			{
				//	pX[r * (2 * sz) + c] = (std::complex<float>)1.0;
				pXReal[r * (2 * sz) + c] = 1.0;
				pXImag[r * (2 * sz) + c] = 0.0;
			}
			else
			{
				//	pX[r * (2 * sz) + c] = (std::complex<float>)0.0;
				pXReal[r * (2 * sz) + c] = 0.0;
				pXImag[r * (2 * sz) + c] = 0.0;
			}
		}
	}

	float pCurRowReal[2  * LTE_PHY_N_ANT_MAX];
	float pCurRowImag[2  * LTE_PHY_N_ANT_MAX];
	
	for (int r = 0; r < sz; r++)
	{
		for (int c = 0; c < (2 * sz); c++)
		{
			float AReal, AImag, BReal, BImag;
			//	pCurRow[c] = pX[r * (2 * sz) + c] / pX[r * (2 * sz) + r];
			AReal = pXReal[r * (2 * sz) + c];
			AImag = pXImag[r * (2 * sz) + c];
			BReal = pXReal[r * (2 * sz) + r];
			BImag = pXImag[r * (2 * sz) + r];
			pCurRowReal[c] = (AReal * BReal + AImag * BImag) / (BReal * BReal + BImag * BImag);
			pCurRowImag[c] = (AImag * BReal - AReal * BImag) / (BReal * BReal + BImag * BImag);
		}

		for (int c = 0; c < (2 * sz); c++)
		{
			//	pX[r * (2 * sz) + c] = pCurRow[c];
			pXReal[r * (2 * sz) + c] = pCurRowReal[c];
			pXImag[r * (2 * sz) + c] = pCurRowImag[c];
		}

		for (int er = r + 1; er < sz; er++)
		{
			float curCReal = pXReal[er * (2 * sz) + r];
			float curCImag = pXImag[er * (2 * sz) + r];

			for (int c = 0; c < (2 * sz); c++)
			{
				//	pX[er * (2 * sz) + c] -= curC * pCurRow[c];
				pXReal[er * (2 * sz) + c] -= (curCReal * pCurRowReal[c] - curCImag * pCurRowImag[c]);
				pXImag[er * (2 * sz) + c] -= (curCReal * pCurRowImag[c] + curCImag * pCurRowReal[c]);
			}  
		}
	}

	for (int r = sz - 1; r >= 0; r--)
	{
		for (int c = 0; c < (2 * sz); c++)
		{
			//	pCurRow[c] = pX[r * (2 * sz) + c];
			pCurRowReal[c] = pXReal[r * (2 * sz) + c];
			pCurRowImag[c] = pXImag[r * (2 * sz) + c];
		}

		for (int er = r - 1; er >= 0; er--)
		{
			float curCReal = pXReal[er * (2 * sz) + r];
			float curCImag = pXImag[er * (2 * sz) + r];

			for (int c = 0; c < (2 * sz); c++)
			{
				//	pX[er * (2 * sz) + c] -= curC * pCurRow[c];
				pXReal[er * (2 * sz) + c] -= (curCReal * pCurRowReal[c] - curCImag * pCurRowImag[c]);
				pXImag[er * (2 * sz) + c] -= (curCReal * pCurRowImag[c] + curCImag * pCurRowReal[c]);
			}  
		}
	}

	for (int r = 0; r < sz; r++)
	{
		for (int c = 0; c < sz; c++)
		{
			int col = c + sz;

			//	pInvM[r * sz + c] = pX[r * (2 * sz) + col];
			pInvMReal[r * sz + c] = pXReal[r * (2 * sz) + col];
			pInvMImag[r * sz + c] = pXImag[r * (2 * sz) + col];
		}

	}
}


__kernel void lsfreqdomain(__global float *pInpDataReal, __global float *pInpDataImag,
						   __global float *pOutDataReal, __global float *pOutDataImag,				   
						   __constant float *pDMRSReal, __constant float *pDMRSImag,
						   int MDFT, int NumLayer, int NumRxAntenna, int NumULSymbSF)
{
	int m = get_global_id(0);

//	printf("tid = %d\n", m);
	// Get dmrs and its received counterpart
	float pXtReal[2 * LTE_PHY_N_ANT_MAX];
	float pXtImag[2 * LTE_PHY_N_ANT_MAX];
	float pXtDaggerReal[2 * LTE_PHY_N_ANT_MAX];
	float pXtDaggerImag[2 * LTE_PHY_N_ANT_MAX];

	for (int slot = 0; slot < 2; slot++)
	{
		for (int layer = 0; layer < NumLayer; layer++)
		{
			pXtReal[slot * NumLayer + layer] = pDMRSReal[(slot * NumLayer + layer) * MDFT + m];
			pXtImag[slot * NumLayer + layer] = pDMRSImag[(slot * NumLayer + layer) * MDFT + m];

			pXtDaggerReal[layer * 2 + slot] = pDMRSReal[(slot * NumLayer + layer) * MDFT + m];
			pXtDaggerImag[layer * 2 + slot] = (-1.0) * pDMRSImag[(slot * NumLayer + layer) * MDFT + m];
		}
	}

	//	int yt_len = NumRxAntenna * 2;
	float pYtReal[2 * LTE_PHY_N_ANT_MAX];
	float pYtImag[2 * LTE_PHY_N_ANT_MAX];

	for (int slot = 0; slot < 2; slot++)                                      
	{
		for (int nrx = 0; nrx < NumRxAntenna; nrx++)
		{
			//	pYt[slot * NumRxAntenna + nrx] = pInpData[(nrx * 2 + slot) * MDFT + m];
			pYtReal[slot * NumRxAntenna + nrx] = pInpDataReal[(nrx * 2 + slot) * MDFT + m];
			pYtImag[slot * NumRxAntenna + nrx] = pInpDataImag[(nrx * 2 + slot) * MDFT + m];
		}
	}

	float pHTransposeReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHTransposeImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];

	/*
	 * FDLSEstimation
	 */
	float pXDXReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pXDXImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];

	MatrixProd(NumLayer, 2, NumLayer, pXtDaggerReal, pXtDaggerImag, pXtReal, pXtImag, pXDXReal, pXDXImag);

	float pInvXDXReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pInvXDXImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];

	MatrixInv(NumLayer, pXDXReal, pXDXImag, pInvXDXReal, pInvXDXImag);
 
	float pXDYReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pXDYImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];

	MatrixProd(NumLayer, 2, NumRxAntenna, pXtDaggerReal, pXtDaggerImag, pYtReal, pYtImag, pXDYReal, pXDYImag);

	MatrixProd(NumLayer, NumLayer, NumRxAntenna, pInvXDXReal, pInvXDXImag, pXDYReal, pXDYImag, pHTransposeReal, pHTransposeImag);

	/*
	 * FDLSEqualization
	 */

	float pHReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHDaggerReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHDaggerImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHDHReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pHDHImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pInvHDHReal[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];
	float pInvHDHImag[LTE_PHY_N_ANT_MAX * LTE_PHY_N_ANT_MAX];

	float pHDYReal[LTE_PHY_N_ANT_MAX];
	float pHDYImag[LTE_PHY_N_ANT_MAX];

	for (int nrx = 0; nrx < NumRxAntenna; nrx++)
	{
		for (int layer = 0; layer < NumLayer; layer++)
		{
			//	pH[nrx * NumLayer + layer] = pHTranspose[layer * NumRxAntenna + nrx];
			pHReal[nrx * NumLayer + layer] = pHTransposeReal[layer * NumRxAntenna + nrx];
			pHImag[nrx * NumLayer + layer] = pHTransposeImag[layer * NumRxAntenna + nrx];
			//	pHDagger[layer * NumRxAntenna + nrx] = conj(pHTranspose[layer * NumRxAntenna + nrx]);
			pHDaggerReal[layer * NumRxAntenna + nrx] = pHTransposeReal[layer * NumRxAntenna + nrx];
			pHDaggerImag[layer * NumRxAntenna + nrx] = (-1.0) * pHTransposeImag[layer * NumRxAntenna + nrx];
		}
	}

	MatrixProd(NumLayer, NumRxAntenna, NumLayer, pHDaggerReal, pHDaggerImag, pHReal, pHImag, pHDHReal, pHDHImag);

	MatrixInv(NumLayer, pHDHReal, pHDHImag, pInvHDHReal, pInvHDHImag);

	////////////////// Equalizing Data /////////////////
	for (int nSymb = 0; nSymb < NumULSymbSF - 2; nSymb++)
	{
		//	int y_len = NumRxAntenna;
		float pYDataReal[LTE_PHY_N_ANT_MAX];
		float pYDataImag[LTE_PHY_N_ANT_MAX];

		for (int nrx = 0; nrx < NumRxAntenna; nrx++)
		{
			int IDX = (NumULSymbSF - 2) * nrx + nSymb + 2 * NumRxAntenna;
			//	*(pYData+nrx)=*(*(pInpData+IDX)+m);
			//	pYData[nrx] = pInpData[IDX * MDFTPerUser + m];
			pYDataReal[nrx] = pInpDataReal[IDX * MDFT + m];
			pYDataImag[nrx] = pInpDataImag[IDX * MDFT + m];
		}
		
		MatrixProd(NumLayer, NumRxAntenna, 1, pHDaggerReal, pHDaggerImag, pYDataReal, pYDataImag, pHDYReal, pHDYImag);

		//	int x_len = NumLayer;
		float pXDataReal[LTE_PHY_N_ANT_MAX];
		float pXDataImag[LTE_PHY_N_ANT_MAX];
		
		MatrixProd(NumLayer, NumLayer, 1, pInvHDHReal, pInvHDHImag, pHDYReal, pHDYImag, pXDataReal, pXDataImag);
		
		for (int layer = 0; layer < NumLayer; layer++)
		{
			int IDX = (NumULSymbSF - 2) * layer + nSymb;
			
			//	*(*(pOutData+IDX)+m)=*(pXData+layer);
			//	pOutData[IDX * MDFTPerUser + m] = pXData[layer];
			pOutDataReal[IDX * MDFT + m] = pXDataReal[layer];
			pOutDataImag[IDX * MDFT + m] = pXDataImag[layer];
		}
	}
}
